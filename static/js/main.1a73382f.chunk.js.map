{"version":3,"sources":["components/madlibs.png","components/Form.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Form","props","handleChange","e","console","log","target","name","form","state","value","setState","handleSubmit","preventDefault","handleFormSubmit","handleClear","firstNoun","firstVerb","firstAdjective","lastNoun","lastVerb","lastAdjective","id","type","this","onChange","onClick","Component","App","newForm","randomnum","Math","floor","random","class","src","mad_image","aspectRatio","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1a73382f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/madlibs.7fad95ad.png\";","import React, { Component } from 'react'\n\nclass Form extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      form: {\n        firstNoun: \"\",\n        firstVerb: \"\",\n        firstAdjective: \"\",\n        lastNoun: \"\",\n        lastVerb: \"\",\n        lastAdjective: \"\"\n      }\n    }\n  }\n\n  handleChange = (e) => {\n    console.log(e.target.name)\n    const { form } = this.state\n    form[e.target.name] = e.target.value\n    this.setState({ form: form })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault()\n    console.log(\"submitted!\")\n    this.props.handleFormSubmit(this.state.form)\n  }\n\n  handleClear = (e) => {\n    const { form } = this.state\n    e.preventDefault()\n    console.log(\"clearing!\")\n    form.firstNoun = \"\"\n    form.firstVerb = \"\"\n    form.firstAdjective = \"\"\n    form.lastNoun = \"\"\n    form.lastVerb = \"\"\n    form.lastAdjective = \"\"\n    this.setState({ form: form })\n    this.props.handleFormSubmit(null)\n  }\n\n  render(){\n    // console.log(this.state.form)\n    return(\n      <>\n        <h3></h3>\n        <form>\n          <label>Enter a noun: </label>\n          <input\n            id=\"word_box\"\n            name=\"firstNoun\"\n            type=\"text\"\n            value={ this.state.form.firstNoun }\n            onChange={ this.handleChange }\n          />\n          <br />\n          <br />\n          <label>Enter a verb: </label>\n          <input\n            id=\"word_box\"\n            name=\"firstVerb\"\n            type=\"text\"\n            value={ this.state.form.firstVerb }\n            onChange={ this.handleChange }\n          />\n          <br />\n          <br />\n          <label>Enter an Adjective: </label>\n          <input\n            id=\"word_box\"\n            name=\"firstAdjective\"\n            type=\"text\"\n            value={ this.state.form.firstAdjective }\n            onChange={ this.handleChange }\n          />\n          <br />\n          <br />\n          <label>Enter a noun: </label>\n          <input\n            id=\"word_box\"\n            name=\"lastNoun\"\n            type=\"text\"\n            value={ this.state.form.lastNoun }\n            onChange={ this.handleChange }\n          />\n          <br />\n          <br />\n          <label>Enter a verb: </label>\n          <input\n            id=\"word_box\"\n            name=\"lastVerb\"\n            type=\"text\"\n            value={ this.state.form.lastVerb }\n            onChange={ this.handleChange }\n          />\n          <br />\n          <br />\n          <label>Enter an Adjective: </label>\n          <input\n            id=\"word_box\"\n            name=\"lastAdjective\"\n            type=\"text\"\n            value={ this.state.form.lastAdjective }\n            onChange={ this.handleChange }\n          />\n          <br />\n          <br />\n          <input\n            id=\"submit_button\"\n            type=\"submit\"\n            value=\" Submit \"\n            onClick={ this.handleSubmit }\n          />\n          <input\n            id=\"reset_button\"\n            type=\"submit\"\n            value=\" Reset \"\n            onClick={ this.handleClear }\n          />\n\n        </form>\n      </>\n    )\n  }\n}\n\nexport default Form\n","import React, { Component } from 'react'\nimport Form from './components/Form'\nimport './App.css'\nimport mad_image from './components/madlibs.png';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      form: null,\n      random: 0\n    }\n  }\n\n  // to get info from child back to parent\n  handleFormSubmit = (newForm) => {\n    //try to generate a random number and put in state\n    let randomnum = 1 + (Math.floor(Math.random() * 3))\n    this.setState({ random: randomnum })\n    // get info and update form\n    this.setState({ form: newForm })\n  }\n\n  // handleClear = () => {\n  //   const { form } = this.state\n  //   console.log(\"clearing!\")\n  //   this.setState({ form: null})\n  // }\n\n  render(){\n    console.log(this.state.form) // check the value of userName here as it evolves\n    console.log(this.state.random)\n    return(\n      <>\n        <body>\n          <div class=\"image_style\">\n            <img src={mad_image} aspectRatio={1/5} />\n          </div>\n\n          <div class=\"row\">\n            <div class=\"column\">\n              <Form\n                handleFormSubmit={ this.handleFormSubmit }\n              />\n              <br />\n            </div>\n\n            <div class=\"column\" id=\"answer_style\">\n              <br />\n              { this.state.form && this.state.random === 1 &&\n                <div>\n                  I am a { this.state.form.firstNoun }. I can { this.state.form.firstVerb } very fast.  When I stay in the sun too long, my { this.state.form.firstAdjective } skin begins to peel.  My friend is a { this.state.form.lastNoun }.  We go to the park and { this.state.form.lastVerb } all the time.  It makes the day go by { this.state.form.lastAdjective }.\n                </div>\n              }\n              { this.state.form && this.state.random === 2 &&\n                <div>\n                  I really like the { this.state.form.firstNoun }. He can { this.state.form.firstVerb } very fast.  When he runs in circles, my { this.state.form.firstAdjective } heart breaks.  He is kinda like a { this.state.form.lastNoun }.  We see him at the beach and { this.state.form.lastVerb } all the time.  He is the most { this.state.form.lastAdjective } one I know.\n                </div>\n              }\n              { this.state.form && this.state.random === 3 &&\n                <div>\n                  Shes a lot like a { this.state.form.firstNoun }. She can { this.state.form.firstVerb } very fast.  When she wears yellow, my { this.state.form.firstAdjective } attitude is much better.  Her friend is a { this.state.form.lastNoun }.  They go to the mall and { this.state.form.lastVerb } all the time.  She is the best { this.state.form.lastAdjective } person I know.\n                </div>\n              }\n            </div>\n          </div>\n        </body>\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}